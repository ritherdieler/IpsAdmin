---
description: 
globs: 
alwaysApply: true
---
# **Reglas para el Desarrollo de la Aplicación de Gestión de ISP con Diseño Moderno**

1. **Objetivo de la Aplicación**  
   - La aplicación se encarga de la gestión de usuarios de un ISP (Internet Service Provider), incluyendo clientes de fibra óptica e inalámbricos.  
   - **Funcionalidades principales**:
     - Registro de suscripciones.  
     - Buscador de suscripciones.  
     - Visualización y registro de pagos.

2. **Migración a Jetpack Compose**  
   - Todas las vistas deben ser desarrolladas en **Jetpack Compose**, reemplazando las implementaciones en XML.  
   - Al migrar un `Fragment` basado en XML, se debe:  
     1. Eliminar la versión XML del fragmento.  
     2. Crear un nuevo `Fragment` que envuelva la pantalla en Compose.  
     3. **Mejorar el diseño** para ofrecer una experiencia de usuario moderna y consistente, siguiendo los lineamientos de **Material 3**.  
     4. siempre que te pida migrar borra el fragmento migrado y su xml.
     5. Las screen en compose deben tener el viewModel y pasar solo la uiState a el composable hijo que representa toda la ui esto con la finalidad de que este composable no tenga ninguna referencia al viewModel.

3. **Diseño y Temas**  
   - Se deben aplicar los lineamientos de **Material 3** para ofrecer una **experiencia de usuario moderna**:  
     - **Uso de MyTheme** como tema principal, aprovechando tipografías y esquemas de color.  
     - **Layouts adaptables** que respondan a pantallas de diferentes tamaños.  
     - **Transiciones y animaciones sutiles** para ofrecer una experiencia fluida y placentera.  
   - Utilizar los componentes personalizados ubicados en  
     `com.dscorp.ispadmin.presentation.ui.features.composecomponents`.

4. **Arquitectura y Flujo de Datos**  
   - En los ViewModel, implementar **Unidirectional Data Flow (UDF)** para un manejo limpio y escalable del estado.  
   - El estado de cada pantalla debe ser representado por una **data class** que contenga la información necesaria para la UI.  
   - Exponer el estado a la UI a través de `State<T>`, `Flow` o `LiveData`.  

5. **Koin como Inyector de Dependencias**  
   - Utilizar **Koin** para la inyección de dependencias en ViewModels y otros componentes.  
   - Configurar los módulos de Koin necesarios (red, repositorios, casos de uso, etc.) y proveer las dependencias adecuadas a cada ViewModel.

6. **Buenas Prácticas de Código**  
   - Mantener el código **modular**, separando responsabilidades en capas:  
     - **Datos** (repositorios, servicios de red, bases de datos).  
     - **Dominio** (casos de uso, lógica de negocio).  
     - **Presentación** (ViewModels y pantallas Compose).  
   - Asegurar que cada ViewModel contenga solo la **lógica de presentación** y no dependa directamente de la capa de UI.  
   - Utilizar nombres claros y descriptivos para clases, funciones y variables, y seguir un estilo de código coherente.

7. **Modernización del Diseño**  
   - Enfocarse en una **experiencia de usuario excelente** con:
     - **Elementos visuales limpios** y consistentes con Material 3.  
     - **Uso de íconos y tipografías** que refuercen la identidad visual de la aplicación.  
     - **Animaciones y transiciones** que enriquezcan la navegación sin distraer al usuario.  
   - Asegurarse de que los colores, espaciados y tamaños de letra sean accesibles y brinden **legibilidad óptima**.

8. **Compilación y Verificación**  
   - Antes de finalizar cualquier tarea de migración o desarrollo, compilar el código para asegurarse de que no haya errores:  
     ```bash
     ./gradlew compileDebugSources
     ```
   - Realizar **pruebas básicas** de las pantallas y flujos de datos para garantizar estabilidad y correcto funcionamiento.

