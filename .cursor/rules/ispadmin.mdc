---
description: 
globs: 
alwaysApply: true
---
# **Reglas para el Desarrollo de la Aplicación de Gestión de ISP**

1. **Objetivo de la Aplicación**  
   - La aplicación se encarga de la gestión de usuarios de un ISP (Internet Service Provider), incluyendo clientes de fibra óptica e inalámbricos.  
   - Funcionalidades principales:
     - Registro de suscripciones.  
     - Buscador de suscripciones.  
     - Visualización y registro de pagos.

2. **Migración a Jetpack Compose**  
   - Todas las vistas deben ser desarrolladas en **Jetpack Compose**, reemplazando las implementaciones en XML.  
   - Al migrar un `Fragment` basado en XML, se debe:  
     1. Eliminar la versión XML del fragmento.  
     2. Crear un nuevo `Fragment` que envuelva la pantalla en Compose.  
     3. Mejorar la interfaz para asegurar una experiencia de usuario óptima, siguiendo los lineamientos de **Material 3**.

3. **Diseño y Temas**  
   - Se deben seguir los lineamientos de **Material 3** para mantener una experiencia de usuario coherente y atractiva.  
   - Utilizar **MyTheme** como tema principal en todas las pantallas de Compose.  
   - Emplear los componentes personalizados localizados en  
     `com.dscorp.ispadmin.presentation.ui.features.composecomponents`.

4. **Arquitectura y Flujo de Datos**  
   - En los ViewModel se debe implementar **Unidirectional Data Flow (UDF)**.  
   - El estado de cada pantalla debe ser representado por una **data class** que contenga toda la información necesaria para la UI.  
   - Exponer el estado a la UI a través de `State<T>`, `Flow`, o `LiveData`.  

5. **Koin como Inyector de Dependencias**  
   - Utilizar **Koin** para la inyección de dependencias en ViewModels y otros componentes.  
   - Configurar los módulos de Koin necesarios (por ejemplo, módulos de red, repositorios, casos de uso, etc.) y proveer las dependencias adecuadas a cada ViewModel.

6. **Buenas Prácticas de Código**  
   - Mantener el código **modular**, separando responsabilidades en capas:  
     - Datos (repositorios, servicios de red, bases de datos).  
     - Dominio (casos de uso, lógica de negocio).  
     - Presentación (ViewModels y pantallas Compose).  
   - Asegurar que cada ViewModel contenga solo lógica de presentación y no dependa directamente de la capa de UI.  
   - Utilizar nombres claros y descriptivos para clases, funciones y variables.

7. **Compilación y Verificación**  
   - Antes de finalizar una tarea de migración o desarrollo, compilar el código para asegurarse de que no haya errores:  
     ```bash
     ./gradlew compileDebugSources
     ```
   - Realizar pruebas básicas de las pantallas y flujos de datos para garantizar estabilidad y correcto funcionamiento.
